/*
 *  BagaturChess (UCI chess engine and tools)
 *  Copyright (C) 2005 Krasimir I. Topchiyski (k_topchiyski@yahoo.com)
 *  
 *  Open Source project location: http://sourceforge.net/projects/bagaturchess/develop
 *  SVN repository https://bagaturchess.svn.sourceforge.net/svnroot/bagaturchess
 *
 *  This file is part of BagaturChess program.
 * 
 *  BagaturChess is open software: you can redistribute it and/or modify
 *  it under the terms of the Eclipse Public License version 1.0 as published by
 *  the Eclipse Foundation.
 *
 *  BagaturChess is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  Eclipse Public License for more details.
 *
 *  You should have received a copy of the Eclipse Public License version 1.0
 *  along with BagaturChess. If not, see <http://www.eclipse.org/legal/epl-v10.html/>.
 *
 */
package bagaturchess.deeplearning_dl4j.impl1.visitor;


import java.io.File;
import java.io.IOException;

import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.inputs.InputType;
import org.deeplearning4j.nn.conf.layers.OutputLayer;
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.nn.weights.WeightInit;
import org.deeplearning4j.util.ModelSerializer;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.dataset.DataSet;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.linalg.learning.config.Adam;
import org.nd4j.linalg.lossfunctions.LossFunctions;

import bagaturchess.bitboard.api.IBitBoard;
import bagaturchess.bitboard.api.IGameStatus;
import bagaturchess.learning.goldmiddle.impl4.filler.Bagatur_ALL_SignalFiller_InArray;
import bagaturchess.ucitracker.api.PositionsVisitor;


public class DeepLearningVisitorImpl_AllFeatures implements PositionsVisitor {
	
	
	private int iteration = 0;
	
	private int counter;
	
	private static final String NET_FILE = "net.dl4j.bin";
	private MultiLayerNetwork network;
	
	
	private double sumDiffs1;
	private double sumDiffs2;
	
	private long startTime;
	
	private Bagatur_ALL_SignalFiller_InArray filler;
	private double[] inputs_d;
	
	private DataSetIteratorImpl dataset;
	
	
	public DeepLearningVisitorImpl_AllFeatures() throws Exception {
		
		if ((new File(NET_FILE)).exists() ){
			network = ModelSerializer.restoreMultiLayerNetwork(new File(NET_FILE));
		} else {
	        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()
	                .updater(new Adam.Builder().learningRate(0.0001).build())
	                .activation(Activation.IDENTITY)
	                .weightInit(WeightInit.XAVIER)
	                .list()
	                .layer(new OutputLayer.Builder(LossFunctions.LossFunction.MSE)
	                        .nOut(1)
	                        .activation(Activation.IDENTITY)
	                        .build())
	                .setInputType(InputType.feedForward(110))
	                .build();
	        
	        
	        network = new MultiLayerNetwork(conf);
	        network.init();
		}
        
		inputs_d = new double[110];
		
		dataset = new DataSetIteratorImpl();
	}
	
	
	@Override
	public void visitPosition(IBitBoard bitboard, IGameStatus status, int expectedWhitePlayerEval) {
		
		counter++;
		/*if (counter > 100000) {
			return;
		}*/
		
		if (iteration == 1) {
			visitPosition1(bitboard, status, expectedWhitePlayerEval);
		} else {
			visitPositionN(bitboard, status, expectedWhitePlayerEval);
		}
	}
	
	
	public void visitPosition1(IBitBoard bitboard, IGameStatus status, int expectedWhitePlayerEval) {
		for (int i = 0; i < inputs_d.length; i++) {
			inputs_d[i] = 0;
		}
		filler.fillSignals(inputs_d, 0);
		dataset.addEntry(new DataSet(Nd4j.create(inputs_d), Nd4j.create(new double[]{expectedWhitePlayerEval})));
	}
	
	
	public void visitPositionN(IBitBoard bitboard, IGameStatus status, int expectedWhitePlayerEval) {
		
		for (int i = 0; i < inputs_d.length; i++) {
			inputs_d[i] = 0;
		}
		filler.fillSignals(inputs_d, 0);
		
		INDArray input = Nd4j.create(inputs_d);
		
		INDArray output = network.output(input, false);
		double actualWhitePlayerEval = output.getDouble(0);
		
		sumDiffs1 += Math.abs(0 - expectedWhitePlayerEval);
		sumDiffs2 += Math.abs(expectedWhitePlayerEval - actualWhitePlayerEval);
		
		/*
		if ((counter % 1000000) == 0) {
			System.out.println("Iteration " + iteration + ": Time " + (System.currentTimeMillis() - startTime) + "ms, " + "Success: " + (100 * (1 - (sumDiffs2 / sumDiffs1))) + "%");
		}*/
	}
	
	
	@Override
	public void begin(IBitBoard bitboard) throws Exception {
		
		filler = new Bagatur_ALL_SignalFiller_InArray(bitboard);
		
		startTime = System.currentTimeMillis();
		
		counter = 0;
		iteration++;
		sumDiffs1 = 0;
		sumDiffs2 = 0;
	}
	
	
	@Override
	public void end() {
		
		network.fit(dataset);
		
		dataset.reset();
		
		if (iteration != 1) {
			
			boolean saveUpdater = true;
			try {
				ModelSerializer.writeModel(network, new File(NET_FILE), saveUpdater);
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			System.out.println("END Iteration " + iteration + ": Time " + (System.currentTimeMillis() - startTime) + "ms, " + "Success: " + (100 * (1 - (sumDiffs2 / sumDiffs1))) + "%");
		}
	}
}
