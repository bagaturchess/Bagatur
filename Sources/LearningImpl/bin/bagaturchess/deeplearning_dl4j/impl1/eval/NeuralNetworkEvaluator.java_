package bagaturchess.deeplearning_dl4j.impl1.eval;


import java.io.File;
import java.io.IOException;

import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.util.ModelSerializer;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.factory.Nd4j;

import bagaturchess.bitboard.api.IBitBoard;
import bagaturchess.learning.goldmiddle.impl4.filler.Bagatur_ALL_SignalFiller_InArray;
import bagaturchess.search.api.IEvalConfig;
import bagaturchess.search.impl.eval.BaseEvaluator;
import bagaturchess.search.impl.eval.cache.IEvalCache;


public class NeuralNetworkEvaluator extends BaseEvaluator {
	
	
	private IBitBoard bitboard;	
	private MultiLayerNetwork network;
	
	
	private Bagatur_ALL_SignalFiller_InArray filler;
	double[] inputs_d;
	
	
	NeuralNetworkEvaluator(IBitBoard _bitboard, IEvalCache _evalCache, IEvalConfig _evalConfig) throws ClassNotFoundException, IOException {
		this(_bitboard, _evalCache, _evalConfig, ModelSerializer.restoreMultiLayerNetwork(new File("net.dl4j.bin")));
	}
	
	
	public NeuralNetworkEvaluator(IBitBoard _bitboard, IEvalCache _evalCache, IEvalConfig _evalConfig, MultiLayerNetwork _network) {
		
		super(_bitboard, _evalCache, _evalConfig);
		
		bitboard = _bitboard;
		
		network = _network;
		
		filler = new Bagatur_ALL_SignalFiller_InArray(bitboard);
		
		inputs_d = new double[110];
	}
	
	
	@Override
	protected double phase1() {
		
		for (int i = 0; i < inputs_d.length; i++) {
			inputs_d[i] = 0;
		}
		filler.fillSignals(inputs_d, 0);
		
		INDArray input = Nd4j.create(inputs_d);
		
		INDArray output = network.output(input, false);
		double actualWhitePlayerEval = output.getDouble(0);

		return actualWhitePlayerEval;
	}
	
	
	@Override
	protected double phase2() {

		int eval = 0;
		
		return eval;
	}
	
	
	@Override
	protected double phase3() {
		
		int eval = 0;
				
		return eval;
	}
	
	
	@Override
	protected double phase4() {
		
		int eval = 0;
		
		return eval;
	}
	
	
	@Override
	protected double phase5() {
		
		int eval = 0;
		
		return eval;
	}
}
